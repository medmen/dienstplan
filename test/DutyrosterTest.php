<?php
declare(strict_types=1);

namespace Dienstplan\Test;

use PHPUnit\Framework\TestCase;
# use Prophecy\PhpUnit\ProphecyTrait;
use Dienstplan\Worker\Dutyroster;

/**
 * Setup: extend Dutyroster class to add a setter for config data
 */
class DutyrosterMock extends Dutyroster {
    public function set_config_data(array $data):void {
        $this->config = $data;
    }

    public function get_config_data(string $key): array{
        if(is_array($this->config) and array_key_exists($key, $this->config)) {
            return $this->config[$key];
        }

        return array();
    }

    public function set_dienstplan(array $dp):void {
        $this->dienstplan = $dp;
    }
}

class DutyrosterTest extends TestCase {
  #  use ProphecyTrait;
    private $fixed_datetime;
    private array $config;

    protected function setUp(): void {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->fixed_datetime = \DateTime::createFromFormat("m/Y", "03/2023");

        $this->config = [
            'people' => [
                'anton'  => ['fullname' => 'Anton Anders', 'pw' => '$2y$10$cv0fitJNDmQdzydZBGcW7eBYqmwqcpSQWMOqt/FiFrTthVqHZqHD6'], // pw chaf666
                'berta'  => ['fullname' => 'Berta Besonders', 'pw' => '$2y$10$cv0fitJNDmQdzydZBGcW7eBYqmwqcpSQWMOqt/FiFrTthVqHZqHD6', 'is_admin' => true],
                'conny'  => [],
                'dick'   => [],
                'egon'   => [],
                'floppy' => [],
                'guste'  => [],
            ],
            'wishes' => [
                'anton' => [
                    "1"  => "D",
                    "4"  => "F",
                    "8"  => "F",
                    "14" => "F",
                ],
                'berta' => [
                    "1"  => "D",
                    "3"  => "F",
                    "4"  => "F",
                    "8"  => "D",
                    "12" => "F",
                ]
            ],
            'urlaub' => [
                'anton' => [
                    '05.02.2017 ~ 15.02.2017',
                    '21.03.2017',
                    '15.05.2017 ~ 25.05.2017'
                ],
                'berta' => [
                    '10.02.2017 ~ 20.02.2017'
                ]
            ],
            'limits' => [
                'total'          => 5,
                'we'             => 2,
                'fr'             => 1,
                'max_iterations' => 500
            ]
        ];
    }

    public function test_has_noduty_wish():void {
        $dutyroster_mock = new DutyrosterMock($this->fixed_datetime);
        $dutyroster_mock->set_config_data($this->config);

        $this->assertTrue($dutyroster_mock->has_noduty_wish('anton', 4));

    }

    public function test_candidates_have_duty_wish():void {
        $dutyroster_mock = new DutyrosterMock($this->fixed_datetime);
        $dutyroster_mock->set_config_data($this->config);
        $this->assertContains('anton', $dutyroster_mock->candidates_have_duty_wish(1));
        $this->assertContains('berta', $dutyroster_mock->candidates_have_duty_wish(8));
    }

    public function test_had_duty_previous_day():void {
        $dutyroster_mock = new DutyrosterMock($this->fixed_datetime);
        $dutyroster_mock->set_config_data($this->config);
        $dutyroster_mock->set_dienstplan(['1' => 'anton', '2' => 'berta']);

        $this->assertTrue($dutyroster_mock->had_duty_previous_day('berta', 3));
        $this->assertFalse($dutyroster_mock->had_duty_previous_day('anton', 3));
        $this->assertFalse($dutyroster_mock->had_duty_previous_day('conny', 3));
    }

}
